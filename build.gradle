// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    dependencies {
        classpath libs.kotlinx.atomicfu.plugin
        classpath libs.hilt.plugin
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

plugins {
    alias(libs.plugins.android.application) apply false
    alias(libs.plugins.android.library) apply false
    alias(libs.plugins.android.kotlin) apply false
    alias(libs.plugins.ktlint)
    alias(libs.plugins.updates.gradle)
    alias(libs.plugins.updates.catalog)
}

allprojects {
    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
        kotlinOptions {
            freeCompilerArgs += [
                "-Xopt-in=kotlin.RequiresOptIn",
                "-Xcontext-receivers",
            ]
        }
    }
}

ktlint {
    version = libs.versions.ktlint.get()
    android = true
    verbose = true
    disabledRules = [
        "no-empty-class-body",
        "no-blank-line-before-rbrace",
    ]
}

tasks.named("dependencyUpdates").configure {
    // Ensure that automatic updates do not go to less stable channels
    rejectVersionIf { selection ->
        def preReleaseChannels = ["RC", "BETA", "ALPHA", "SNAPSHOT"]
        def currentPreReleaseChannel = preReleaseChannels.find { channel ->
            selection.currentVersion.toUpperCase().contains(channel)
        }
        def disallowedChannels = preReleaseChannels.takeRight(
            preReleaseChannels.size() - (preReleaseChannels.indexOf(currentPreReleaseChannel) + 1)
        )

        return disallowedChannels.any { channel ->
            selection.candidate.version.toUpperCase().contains(channel)
        }
    }
}

versionCatalogUpdate {
    sortByKey = true
    keep {
        keepUnusedVersions = true
        keepUnusedLibraries = false
        keepUnusedPlugins = false
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}
